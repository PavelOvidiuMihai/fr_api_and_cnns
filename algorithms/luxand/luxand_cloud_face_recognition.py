# -*- coding: utf-8 -*-
"""Luxand.cloud Face Recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gpa40-2MiEEcJo1baxvtKRA3AhHbk0lU
"""

from google.colab import drive
drive.mount('/content/gdrive')

import requests
import os
import json

#consts
dataset_path = "/content/gdrive/MyDrive/MIT_dataset/images/"
file_extension = ".jpg"
person_map = dict() #will contain person_name : person_id, used for add_face_to_person
result_map = dict() 

url_base = "https://api.luxand.cloud/subject"
url_create_person = url_base+ "/v2" #stores the faces into a gallery you create
url_face_recognition = "https://api.luxand.cloud/photo/search" #Recognize previously added to database people in a specified photo

api_key = '6b54e002ae54407987d0fe399fc50a07'
headers = { 'token': api_key }
payload_empty = {}

def create_person(person_name, file_path):

  payload = {"name": person_name,"store":"1"}
  files = { "photo": open(file_path, "rb") }
  
  response = requests.request("POST", url_create_person, data=payload, headers=headers, files=files)
  response_json = response.json()

  if response_json["status"]:
    return response_json["id"]
  else:
    print("CREATE_PERSON FAIL: ", json.dumps(response_json, indent = 4))
    return None

def init():
  global person_map, result_map
  person_map.clear()
  result_map.clear()
  person_already_enrolled = " "
  
  for filename in sorted(os.listdir(dataset_path)):
    #print(filename)
    
    key = filename.split('.')[0] #get file names without extension
    result_map.update({key : None}) #insert keys in map

    if key.startswith(person_already_enrolled):
      continue

    complete_file_path = dataset_path + key + file_extension
    
    person_name = key.split('_')[0]
    print("Creating person ", person_name, "...")
    person_id = create_person(person_name, complete_file_path)

    #insert person in map
    person_map.update({person_name: person_id})

    #flag to insert a single person with a single photo
    person_already_enrolled = key.split('_')[0]

  print("person_map: ", person_map)
  #print(json.dumps(result_map, indent = 4))

def list_persons():
  
  response = requests.request("GET", url_base, data=payload_empty, headers=headers)
  print("LIST_PERSONS: ", response.text)

def delete_all_persons():
  
  response = requests.request("DELETE", url_base, data=payload_empty, headers=headers)
  print("DELETE_ALL_PERSONS: ", response.text)

def add_face_to_person(person_id, file_path):

  payload = {"store":"1"}
  url_add_face_to_person = url_base + "/" + person_id
  files = { "photo": open(file_path, "rb") }
  
  response = requests.request("POST", url, data=payload, headers=headers, files=files)
  print("ADD_FACE_TO_PERSON: ", response.text)

def face_recognition(file_path):
  
  payload = {}
  files = { "photo": open(file_path, "rb") }
  response = requests.request("POST", url_face_recognition, data=payload, headers=headers, files=files)
  response_json = response.json()

  #print("face_recognition: ", json.dumps(response_json, indent = 4))

  if response_json: #in case of empty list response []

    extracted_confidence = round(float(response_json[0]["probability"]) * 100,2) # 0.86944 -> 86.94
    extracted_person_name = response_json[0]["name"]
    return extracted_confidence, extracted_person_name
  else: 
    return None, None

def add_results():
  global person_map, result_map

  for key in result_map.keys():
    
    person_result_map = dict()

    complete_file_path = dataset_path + key + file_extension

    confidence, person_name = face_recognition(complete_file_path)
    print("key:", key, " person_name:", person_name, " confidence:", confidence)

    person_result_map.update({person_name : confidence})
      
    result_map.update({key : person_result_map})
    #print(json.dumps(result_map, indent = 4))

def show_results():
  print("========================================FINAL RESULTS========================================")
  for key, value in sorted (result_map.items()):
    print(key, ":", value)

init()
add_results()
show_results()
delete_all_persons()