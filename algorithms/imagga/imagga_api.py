# -*- coding: utf-8 -*-
"""Imagga - API.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ma5UJyzpxzgbaOZgTZVyuXqPbxgd0Z4s
"""

from google.colab import drive
drive.mount('/content/gdrive')

import requests
import json
import os
import time

#consts
dataset_path = "/content/gdrive/MyDrive/MIT_dataset/images/"

result_map = dict() 
face_id_map = dict()

url_base = "https://api.imagga.com/v2/faces/"
url_face_detection = url_base + "detections"
url_face_similarity = url_base + "similarity?face_id=%s&second_face_id=%s"

api_key = 'acc_d0e3bda2908fe1a'
api_secret = '2f7e705c0c8987e6321efb0d2e0721d7'

def init():
  for filename in sorted(os.listdir(dataset_path)):
    #print(filename)
    key = filename.split('.')[0] #get file names without extension
    result_map.update({key : None}) #insert keys in map
    face_id_map.update({key : None}) #insert keys in map

def detect_face(img_path):
  response = requests.post(
      url_face_detection, 
      auth=(api_key, api_secret), 
      files={'image': open(img_path, 'rb'), "return_face_id":1})
  
  response_json = response.json()
  
  #print("DETECT_FACE: ", json.dumps(response_json, indent = 4))
  return response_json["result"]["faces"][0]["face_id"]

def add_face_id_to_map(file_extension = ".jpg"):
  global face_id_map
  for key in face_id_map.keys():
    complete_file_path = dataset_path + key + file_extension # ex: "/content/gdrive/MyDrive/MIT_dataset/images/0_1.jpg" 

    face_id = detect_face(complete_file_path)
    face_id_map.update({key : face_id})

  print(json.dumps(face_id_map, indent = 4)) #print face_id_map

def check_similarity(face_id_1, face_id_2):

  time.sleep(5) #to make sure each request is successful 
  response = requests.get(
    url_face_similarity % (face_id_1, face_id_2),
    auth=(api_key, api_secret))

  response_json = response.json()

  if response_json["status"]["type"] == "success":
    #print("CHECK_SIMILARITY: ", response_json["result"]["score"])
    return "{:.2f}".format(response_json["result"]["score"]) #formating to be only 2 decimals
  elif response_json["status"]["type"] == "error":
    print("CHECK_SIMILARITY: ", response_json["status"]["text"]) #print errr message

def add_results():
  global result_map, face_id_map

  for key1, value1 in face_id_map.items():

    person_confidence_score = dict()

    for key2, value2 in face_id_map.items():

      if value1 and value2 is not None:
        score = check_similarity(value1, value2)
        print("key1:", key1, " key2:", key2, " score:", score)
        person_confidence_score.update({key2 : score})

    if person_confidence_score :
      result_map.update({key1 : person_confidence_score})

  print(json.dumps(result_map, indent = 4))

def show_results():
  print("========================================FINAL RESULTS========================================")
  for key, person_confidence_score_map in sorted (result_map.items()):
    score = None
    if person_confidence_score_map is not None:
      score = person_confidence_score_map.values()

    print(key, ":", score)

init()
add_face_id_to_map()
add_results()
show_results()