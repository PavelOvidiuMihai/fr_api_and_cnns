# -*- coding: utf-8 -*-
"""Face++.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eMgT2tq7IaoA7tyE8bO6cUQkkiorwgk3
"""

from google.colab import drive
drive.mount('/content/gdrive')

import requests
import json
import os

#consts
dataset_path = "/content/gdrive/MyDrive/MIT_dataset/images/"
file_extension = ".jpg"
result_map = dict() 

api_key ='HBywpIIjA9LYv2Fk8v8tGS4BWZL3zN5N'
api_secret ='ETN7VUOppGBZsgq6qKd3OEBmwBbpdme8'
params = {'api_key': api_key, 'api_secret' : api_secret}
api_url = 'https://api-us.faceplusplus.com/facepp/v3/compare'

def init():
  for filename in sorted(os.listdir(dataset_path)):
    #print(filename)
    key = filename.split('.')[0] #get file names without extension
    result_map.update({key : None}) #insert keys in map
  #print(json.dumps(result_map, indent = 4))

def compare(img1_path, img2_path):
  try: 

    files = {'image_file1': (img1_path, open(img1_path, 'rb')), 'image_file2': (img2_path, open(img2_path, 'rb'))}

    r = requests.post(api_url, params, files=files)
    response = json.loads(r.text)
    return response['confidence'] #, response['thresholds']
    
  except:
    print('Exception occured for: ', img1_path, ' ', img2_path, ' trying again...')
    compare(img1_path, img2_path)

def add_results():
  global result_map

  for key1 in result_map.keys():

    person_confidence_score = dict()

    for key2 in result_map.keys():

          complete_file_path1 = dataset_path + key1 + file_extension
          complete_file_path2 = dataset_path + key2 + file_extension
          score = compare(complete_file_path1, complete_file_path2)
          print("key1:", key1, " key2:", key2, " score:", score)
          person_confidence_score.update({key2 : score})

    if person_confidence_score :
      result_map.update({key1 : person_confidence_score})

  #print(json.dumps(result_map, indent = 4))

def show_results():
  print("========================================FINAL RESULTS========================================")
  for key, person_confidence_score_map in sorted (result_map.items()):
    score = None
    if person_confidence_score_map is not None:
      score = person_confidence_score_map.values()

    print(key, ":", score)

init()
add_results()
show_results()